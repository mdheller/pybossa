# -*- coding: utf8 -*-
from collections import OrderedDict

SERVER_NAME = 'localhost'
FORCE_HTTPS = False
HOST = 'localhost'
PORT = 5001
DEFAULT_SYNC_TARGET = 'localhost'
# THEME='crowdcrafting-theme'
CRYPTOPAN_KEY = b'32-char-str-for-AES-key-and-pad.'
SECRET = 'foobar'
SECRET_KEY = 'my-session-secret'
SERVER_TYPE = 'Test'
SQLALCHEMY_DATABASE_TEST_URI = 'postgresql://rtester:rtester@localhost/pybossa_test'
GOOGLE_CLIENT_ID = 'id'
GOOGLE_CLIENT_SECRET = 'secret'
TWITTER_CONSUMER_KEY='key'
TWITTER_CONSUMER_SECRET='secret'
FACEBOOK_APP_ID='id'
FACEBOOK_APP_SECRET='secret'
TERMSOFUSE = 'http://okfn.org/terms-of-use/'
DATAUSE = 'http://opendatacommons.org/licenses/by/'
ITSDANGEROUSKEY = 'its-dangerous-key'
LOGO = 'logo.png'
MAIL_SERVER = 'localhost'
MAIL_USERNAME = None
MAIL_PASSWORD = None
MAIL_PORT = 25
MAIL_FAIL_SILENTLY = True
MAIL_DEFAULT_SENDER = 'PYBOSSA Support <info@pybossa.com>'
ADMINS = ['admin@broken.com']
ANNOUNCEMENT = {'admin': 'Root Message', 'user': 'User Message', 'owner': 'Owner Message'}
ANNOUNCEMENT_LEVELS = {
    'admin': {'display': 'Admin', 'level': 0},
    'owner': {'display': 'Project Creator', 'level': 10},
    'subadmin': {'display': 'Subadmin', 'level': 20},
    'user': {'display': 'User', 'level': 30}
}
ANNOUNCEMENT_LEVEL_OPTIONS = [
    {'text': v['display'], 'value': v['level']} for k, v in ANNOUNCEMENT_LEVELS.items()
]
LOCALES = [('en', 'English'), ('es', 'Español'),
           ('it', 'Italiano'), ('fr', 'Français'),
           ('ja', '日本語'), ('el', 'ελληνικά')]
ENFORCE_PRIVACY = False
REDIS_CACHE_ENABLED = False
REDIS_SENTINEL = [('localhost', 26379)]
REDIS_SENTINELS = 'localhost:26379'
REDIS_KEYPREFIX = 'pybossa_cache'
REDIS_MASTER_NAME = 'mymaster'
REDIS_SOCKET_TIMEOUT = 30
WTF_CSRF_ENABLED = False
WTF_CSRF_SSL_STRICT = False
TESTING = True
CSRF_ENABLED = False
MAIL_SERVER = 'localhost'
MAIL_USERNAME = None
MAIL_PASSWORD = None
MAIL_PORT = 25
MAIL_FAIL_SILENTLY = True
MAIL_DEFAULT_SENDER = 'PYBOSSA Support <info@pybossa.com>'
ALLOWED_EXTENSIONS = ['js', 'css', 'png', 'jpg', 'jpeg', 'gif', 'zip']
UPLOAD_FOLDER = '/tmp/'
UPLOAD_METHOD = 'local'
RACKSPACE_USERNAME = 'username'
RACKSPACE_API_KEY = 'apikey'
RACKSPACE_REGION = 'ORD'
FLICKR_API_KEY = 'apikey'
FLICKR_SHARED_SECRET = "secret"
DROPBOX_APP_KEY = 'key'
YOUTUBE_API_SERVER_KEY = 'apikey'
LIMIT = 25
PER = 15 * 60
SSE = True
TIMEOUT = 5 * 60
PERMANENT_SESSION_LIFETIME = 24*60
LDAP_USER_OBJECT_FILTER = '(&(objectclass=inetOrgPerson)(cn=%s))'
LDAP_USER_FILTER_FIELD = 'cn'
LDAP_PYBOSSA_FIELDS = {'fullname': 'givenName',
                       'name': 'uid',
                       'email_addr': 'cn'}
FLASK_PROFILER = {
    "enabled": True,
    "storage": {
        "engine": "sqlite"
    },
    "basicAuth":{
        "enabled": True,
        "username": "admin",
        "password": "admin"
    },
    "ignore": [
	    "^/static/.*"
	]
}
BSSO_SETTINGS = {
    "strict": True,
    "debug": True,
    "sp": {
        "entityId": "test",
        "assertionConsumerService": {
            "url": "http://localhost:5000/bloomberg/login",
            "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
        },
        "singleLogoutService": {
            "url": "http://localhost:5000/login/callback",
            "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
        },
        "NameIDFormat": "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
    },
    "idp": {
        "entityId": "https://test.com",
        "singleSignOnService": {
            "url": "https://test.com",
            "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
        },
        "singleLogoutService": {
            "url": "https://test.com",
            "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
        }
    }
}
AVATAR_ABSOLUTE = True
SPAM = ['fake.com']
PRODUCTS_SUBPRODUCTS = {'abc': ['def']}


# Wizard Steps
# 'step_name': {
#
#        'title': 'Step 1', [Title that will be displayed on the UI]
#        'icon': 'fa fa-pencil', [Icon class that will be use to be displayed on the UI]
#        'href': {'url_for': 'project.new' [Url that will be redirected to when user click at step]
#                 'args': ['short_name', 'published'] [arguments for url_for function possible values are "short_name" and "published" or empty]
#                }
#        'done_checks': {'always': False, 'and': [''], 'or': []},  [if True Step is going to be filled]
#        'enable_checks': {'always': True, 'and': [''], 'or': []}, [if True Step border are going to be blue]
#        'visible_checks': {'and': ['not_project_exist'], 'or': []}, [if True Step is going to be visible]
#        [Checks:
#           The 'always' key must be used to keep a static value {always: True/False}, it means no its not dependent on
#           any logic.
#
#           All 'check-names' keys represent specific checks functions that can be found on the wizard.py class as check_options.
#               each step can have combinations of checks in {'and':[], 'or': []} and the final result will be a bolean condition
#               equivalent to"any('or') or all(and)"
#         ]
#    }

WIZARD_STEPS = OrderedDict([
    ('new_project', {
        'title': 'Project Creation',
        'icon': 'fa fa-pencil',
        'href': {'url_for': 'project.new',
                 'args': ['']},
        'done_checks': {'always': False},
        'enable_checks': {'always': True},
        'visible_checks': {'and': ['not_project_exist'], 'or': []},
    }),
    ('project_details', {
        'title': 'Project Details',
        'icon': 'fa fa-pencil',
        'href': {'url_for': 'project.update',
                 'args': ['short_name']},
        'done_checks': {'always': True},
        'enable_checks': {'always': True},
        'visible_checks': {'and': ['project_exist'], 'or': []}
    }),
    ('task_imports', {
        'title': 'Task Imports',
        'icon': 'fa fa-file',
        'href': {'url_for': 'project.import_task',
                 'args': ['short_name']},
        'done_checks': {'and': ['tasks_amount'], 'or': []},
        'enable_checks': {'and': ['project_exist'], 'or': []},
        'visible_checks': {'always': True}
    }),
    ('task_presenter', {
        'title': 'Task Presenter',
        'icon': 'fa fa-pencil',
        'href': {'url_for': 'project.task_presenter_editor',
                 'args': ['short_name']},
        'done_checks': {'and': ['task_presenter'], 'or': []},
        'enable_checks': {'and': ['tasks_amount'], 'or': ['task_presenter', 'project_publish']},
        'visible_checks': {'always': True}
    }),
    ('task_settings', {
        'title': 'Task Settings',
        'icon': 'fa fa-cogs',
        'href': {'url_for': 'project.task_settings',
                 'args': ['short_name']},
        'done_checks': {'and': ['task_presenter', 'tasks_amount'], 'or': ['project_publish']},
        'enable_checks': {'and': ['task_presenter', 'tasks_amount'], 'or': ['project_publish']},
        'visible_checks': {'always': True}
    }),
    ('publish', {
        'title': 'Publish',
        'icon': 'fa fa-check',
        'href': {'url_for': 'project.publish',
                 'args': ['short_name', 'published']},
        'done_checks': {'always': False},
        'enable_checks': {'and': ['task_presenter', 'tasks_amount'], 'or': ['project_publish']},
        'visible_checks': {'and': ['not_project_publish'], 'or': ['not_project_exist']},
    }),
    ('published', {
        'title': 'Published',
        'icon': 'fa fa-check',
        'href': {'url_for': 'project.details',
                 'args': ['short_name']},
        'done_checks': {'always': True},
        'enable_checks': {'always': True},
        'visible_checks': {'and': ['project_publish'], 'or': []}})
])
